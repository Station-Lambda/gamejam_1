@using Sandbox;
@using Sandbox.UI;
@inherits PanelComponent
@namespace Sandbox

<root class="@(IsVisible ? "open" : "")">
	<div class="chat-container">
		<div class="chat-header">
			<div class="npc-info">
				<span class="chat-label">Conversation avec</span>
				<h3 class="npc-name">@NpcName</h3>
			</div>
			<button class="close-button" @onclick=@CloseChat>
				<span>ESC</span>
			</button>
		</div>
		<div class="chat-body">
			<div class="messages-container">
				@foreach (var message in Messages)
				{
					<div class="message-entry @(message.IsPlayer ? "player" : "npc")">
						@if (!message.IsPlayer)
						{
							<div class="author">@NpcName</div>
						}
						<div class="message-content">
							<span class="text">@message.Text</span>
						</div>
					</div>
				}
			</div>
			<div class="options-container">
				<div class="options-label">Choisissez une réponse:</div>
				<div class="options-list">
					@foreach (var option in CurrentOptions)
					{
						<button class="dialog-option" @onclick=@(() => SelectOption(option))>
							<span class="option-text">@option.Text</span>
						</button>
					}
				</div>
			</div>
		</div>
	</div>
</root>

@code
{
	[Property] public string NpcName { get; set; } = "NPC";
	[Property] public bool IsVisible { get; set; } = false;
	
	public List<ChatMessage> Messages { get; set; } = new();
	public List<DialogOption> CurrentOptions { get; set; } = new();
	
	private NpcProfile currentNpc;
	
	public class ChatMessage
	{
		public string Text { get; set; }
		public bool IsPlayer { get; set; }
	}
	
	public class DialogOption
	{
		public string Text { get; set; }
		public System.Action OnSelect { get; set; }
	}
	
	public void Initialize(NpcProfile npc)
	{
		currentNpc = npc;
		NpcName = npc?.Name ?? "Unknown";
		Messages.Clear();
		
		var greeting = "Bonjour! Comment puis-je vous aider?";
		Messages.Add(new ChatMessage 
		{ 
			Text = greeting, 
			IsPlayer = false 
		});
		
		if ( ChatManager.Instance.IsValid() && currentNpc.IsValid() )
		{
			ChatManager.Instance.SaveMessage( currentNpc.GameObject.Id.ToString(), greeting, false );
		}
		
		UpdateOptions();
	}
	
	public void OpenChat(NpcProfile npc)
	{
		Initialize(npc);
		IsVisible = true;
	}
	
	public void CloseChat()
	{
		IsVisible = false;
	}
	
	public void Toggle()
	{
		IsVisible = !IsVisible;
	}
	
	protected override void OnUpdate()
	{
		if ( IsVisible && Input.Pressed( "menu" ) )
		{
			CloseChat();
		}
	}
	
	private void SelectOption(DialogOption option)
	{
		Messages.Add(new ChatMessage 
		{ 
			Text = option.Text, 
			IsPlayer = true 
		});
		
		if ( ChatManager.Instance.IsValid() && currentNpc.IsValid() )
		{
			ChatManager.Instance.SaveMessage( currentNpc.GameObject.Id.ToString(), option.Text, true );
		}
		
		option.OnSelect?.Invoke();
		
		UpdateOptions();
	}
	
	private void UpdateOptions()
	{
		CurrentOptions.Clear();
		
		CurrentOptions.Add(new DialogOption
		{
			Text = "Qui êtes-vous?",
			OnSelect = () =>
			{
				var response = $"Je suis {NpcName}. Je vis dans cette ville depuis longtemps.";
				Messages.Add(new ChatMessage
				{
					Text = response,
					IsPlayer = false
				});
				
				if ( ChatManager.Instance.IsValid() && currentNpc.IsValid() )
				{
					ChatManager.Instance.SaveMessage( currentNpc.GameObject.Id.ToString(), response, false );
				}
			}
		});
		
		CurrentOptions.Add(new DialogOption
		{
			Text = "Que savez-vous sur le culte?",
			OnSelect = () =>
			{
				var response = "Le culte? Je... je ne sais pas de quoi vous parlez.";
				Messages.Add(new ChatMessage
				{
					Text = response,
					IsPlayer = false
				});
				
				if ( ChatManager.Instance.IsValid() && currentNpc.IsValid() )
				{
					ChatManager.Instance.SaveMessage( currentNpc.GameObject.Id.ToString(), response, false );
				}
			}
		});
		
		CurrentOptions.Add(new DialogOption
		{
			Text = "Au revoir",
			OnSelect = () => CloseChat()
		});
	}
	
	protected override int BuildHash() 
		=> System.HashCode.Combine(IsVisible, Messages.Count, CurrentOptions.Count);
}